import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Anas Alhomsi
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xmlTreeOfFeed = new XMLTree1(url);
        //Checking if it's the right version and if the root tag is rss
        if (xmlTreeOfFeed.label() == "rss") {
            if (xmlTreeOfFeed.hasAttribute("version")) {
                if (xmlTreeOfFeed.attributeValue("version").equals("2.0")) {
                    //Creating a new file output
                    SimpleWriter feedOut = new SimpleWriter1L(file);
                    outputHeader(xmlTreeOfFeed.child(0), feedOut);
                    int firstItemIndex = getChildElement(xmlTreeOfFeed.child(0),
                            "item");
                    int numOfChildren = xmlTreeOfFeed.child(0)
                            .numberOfChildren();
                    //Checking if there's items found
                    if (firstItemIndex != -1) {
                        while (firstItemIndex < numOfChildren) {
                            processItem(xmlTreeOfFeed.child(0)
                                    .child(firstItemIndex), feedOut);
                            firstItemIndex++;
                        }
                    }
                    outputFooter(feedOut);
                }
            }
        }
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        //checking for title
        int titleIndex = getChildElement(channel, "title");
        Boolean titleFound = false;
        String title = channel.child(titleIndex).child(0).label();
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            out.println(title);
            titleFound = true;
        } else {
            out.println("Title Unavailable");
        }
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        out.print("<h1>");
        out.print("<a href=");
        //Checking for link
        int linkIndex = getChildElement(channel, "link");
        out.print("\"" + channel.child(linkIndex).child(0).label() + "\">");
        if (titleFound) {
            out.println(title + "</a></h1>");
        } else {
            out.println("Title Unavailable </a></h1>");
        }
        out.print("<p>");
        //Checking for description
        int descriptionIndex = getChildElement(channel, "description");
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            out.println(
                    channel.child(descriptionIndex).child(0).label() + "</p>");
        } else {
            out.println("Description Unavailable </p>");
        }
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th> Date </th>");
        out.println("<th> Source </th>");
        out.println("<th> News </th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int childElement = -1;
        int i = 0;
        boolean firstElement = false;
        //While loop to get the first child
        while (xml.numberOfChildren() > i && !firstElement) {
            if (xml.child(i).label().equals(tag)) {
                childElement = i;
                firstElement = true;
            }
            i++;
        }
        return childElement;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<tr>");
        out.print("<td>");
        //Checking for Publication Date
        int indexOfPublicationDate = getChildElement(item, "pubDate");
        if (indexOfPublicationDate == -1) {
            out.print("Publication Date Unavailable </td>");
        } else {
            out.println(item.child(indexOfPublicationDate) + "</td>");
        }
        out.print("<td>");
        //Checking for Source
        int indexOfSource = getChildElement(item, "source");
        if (indexOfSource == -1) {
            out.println("Source Unavailable </td>");
        } else {
            if (item.child(indexOfSource).hasAttribute("url")) {
                out.println(item.child(indexOfSource).attributeValue("url"));
            }
        }
        //Checking for news
        out.print("<td>");
        int indexOfLink = getChildElement(item, "link");
        if (indexOfLink == -1) {
            out.print("<a href=\"" + "link unavailable" + "\"");
        } else {
            out.print("<a href=\"" + item.child(indexOfLink).child(0).label()
                    + "\">");
        }
        //Checking for title or Description
        int indexOfTitle = getChildElement(item, "title");
        int indexOfDescription = getChildElement(item, "description");
        if ((item.child(indexOfTitle).numberOfChildren() > 0)) {
            out.print(item.child(indexOfTitle).child(0).label());
        } else if (item.child(indexOfDescription).numberOfChildren() > 0) {
            out.print(item.child(indexOfDescription).child(0).label());
        } else {
            out.print("No title or description");
        }
        out.println("</a></td>");
        out.print("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        //Prompts the user for a valid url containing a list of RSS 2.0 files
        out.print("Enter a URL containing a list of RSS 2.0 files: ");
        String url = in.nextLine();
        XMLTree input = new XMLTree1(url);
        out.print("Enter the name of the output file: ");
        String fileName = in.nextLine();
        SimpleWriter fileWriter = new SimpleWriter1L(fileName);
        //Header of the rss feed
        fileWriter.println("<html>");
        fileWriter.println("<head>");
        String title = input.attributeValue("title");
        fileWriter.println("<title>" + title + "</title>");
        fileWriter.println("</head>");
        fileWriter.println("<body>");
        fileWriter.println("<h2>" + title + "</h2>");
        fileWriter.println("<ul>");

        int numOfFeeds = input.numberOfChildren();
        //We want to go though all rss links (feeds)
        for (int i = 0; i < numOfFeeds; i++) {
            String file = input.child(i).attributeValue("file");
            String urlOfFeed = input.child(i).attributeValue("url");
            String titleOfFeed = input.child(i).attributeValue("name");
            fileWriter.print("<li><a href=\"" + file + "\">");
            fileWriter.print(titleOfFeed);
            fileWriter.println("</a></li>");
            processFeed(urlOfFeed, file, fileWriter);
        }
        //Closing tags
        fileWriter.println("<ul>");
        fileWriter.println("</body>");
        fileWriter.println("</html>");

        in.close();
        out.close();
        fileWriter.close();
    }

}